/**
 *
 *  Player.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Player.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::techluster;

const std::string Player::Cols::_id = "id";
const std::string Player::Cols::_username = "username";
const std::string Player::Cols::_motto = "motto";
const std::string Player::Cols::_region = "region";
const std::string Player::Cols::_avatar = "avatar";
const std::string Player::Cols::_avatar_hash = "avatar_hash";
const std::string Player::Cols::_avatar_frame = "avatar_frame";
const std::string Player::Cols::_clan = "clan";
const std::string Player::Cols::_permission = "permission";
const std::string Player::Cols::_password = "password";
const std::string Player::Cols::_email = "email";
const std::string Player::primaryKeyName = "id";
const bool Player::hasPrimaryKey = true;
const std::string Player::tableName = "player";

const std::vector<typename Player::MetaData> Player::metaData_ = {
        {"id",           "int64_t",     "bigint",       8, 1, 1, 1},
        {"username",     "std::string", "text",         0, 0, 0, 1},
        {"motto",        "std::string", "text",         0, 0, 0, 0},
        {"region",       "int32_t",     "integer",      4, 0, 0, 1},
        {"avatar",       "std::string", "text",         0, 0, 0, 0},
        {"avatar_hash",  "std::string", "text",         0, 0, 0, 0},
        {"avatar_frame", "int32_t",     "integer",      4, 0, 0, 1},
        {"clan",         "std::string", "text",         0, 0, 0, 0},
        {"permission",   "std::string", "USER-DEFINED", 0, 0, 0, 1},
        {"password",     "std::string", "text",         0, 0, 0, 0},
        {"email",        "std::string", "text",         0, 0, 0, 0}
};

const std::string &Player::getColumnName(size_t index) noexcept(false) {
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}

Player::Player(const Row &r, const ssize_t indexOffset) noexcept {
    if (indexOffset < 0) {
        if (!r["id"].isNull()) {
            id_ = std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if (!r["username"].isNull()) {
            username_ = std::make_shared<std::string>(r["username"].as<std::string>());
        }
        if (!r["motto"].isNull()) {
            motto_ = std::make_shared<std::string>(r["motto"].as<std::string>());
        }
        if (!r["region"].isNull()) {
            region_ = std::make_shared<int32_t>(r["region"].as<int32_t>());
        }
        if (!r["avatar"].isNull()) {
            avatar_ = std::make_shared<std::string>(r["avatar"].as<std::string>());
        }
        if (!r["avatar_hash"].isNull()) {
            avatarHash_ = std::make_shared<std::string>(r["avatar_hash"].as<std::string>());
        }
        if (!r["avatar_frame"].isNull()) {
            avatarFrame_ = std::make_shared<int32_t>(r["avatar_frame"].as<int32_t>());
        }
        if (!r["clan"].isNull()) {
            clan_ = std::make_shared<std::string>(r["clan"].as<std::string>());
        }
        if (!r["permission"].isNull()) {
            permission_ = std::make_shared<std::string>(r["permission"].as<std::string>());
        }
        if (!r["password"].isNull()) {
            password_ = std::make_shared<std::string>(r["password"].as<std::string>());
        }
        if (!r["email"].isNull()) {
            email_ = std::make_shared<std::string>(r["email"].as<std::string>());
        }
    } else {
        size_t offset = (size_t) indexOffset;
        if (offset + 11 > r.size()) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull()) {
            id_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if (!r[index].isNull()) {
            username_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if (!r[index].isNull()) {
            motto_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if (!r[index].isNull()) {
            region_ = std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if (!r[index].isNull()) {
            avatar_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if (!r[index].isNull()) {
            avatarHash_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if (!r[index].isNull()) {
            avatarFrame_ = std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if (!r[index].isNull()) {
            clan_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if (!r[index].isNull()) {
            permission_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if (!r[index].isNull()) {
            password_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if (!r[index].isNull()) {
            email_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Player::Player(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 11) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            id_ = std::make_shared<int64_t>((int64_t) pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            username_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull()) {
            motto_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull()) {
            region_ = std::make_shared<int32_t>((int32_t) pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull()) {
            avatar_ = std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull()) {
            avatarHash_ = std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull()) {
            avatarFrame_ = std::make_shared<int32_t>((int32_t) pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull()) {
            clan_ = std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if (!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8])) {
        dirtyFlag_[8] = true;
        if (!pJson[pMasqueradingVector[8]].isNull()) {
            permission_ = std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if (!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9])) {
        dirtyFlag_[9] = true;
        if (!pJson[pMasqueradingVector[9]].isNull()) {
            password_ = std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if (!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10])) {
        dirtyFlag_[10] = true;
        if (!pJson[pMasqueradingVector[10]].isNull()) {
            email_ = std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
}

Player::Player(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("id")) {
        dirtyFlag_[0] = true;
        if (!pJson["id"].isNull()) {
            id_ = std::make_shared<int64_t>((int64_t) pJson["id"].asInt64());
        }
    }
    if (pJson.isMember("username")) {
        dirtyFlag_[1] = true;
        if (!pJson["username"].isNull()) {
            username_ = std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if (pJson.isMember("motto")) {
        dirtyFlag_[2] = true;
        if (!pJson["motto"].isNull()) {
            motto_ = std::make_shared<std::string>(pJson["motto"].asString());
        }
    }
    if (pJson.isMember("region")) {
        dirtyFlag_[3] = true;
        if (!pJson["region"].isNull()) {
            region_ = std::make_shared<int32_t>((int32_t) pJson["region"].asInt64());
        }
    }
    if (pJson.isMember("avatar")) {
        dirtyFlag_[4] = true;
        if (!pJson["avatar"].isNull()) {
            avatar_ = std::make_shared<std::string>(pJson["avatar"].asString());
        }
    }
    if (pJson.isMember("avatar_hash")) {
        dirtyFlag_[5] = true;
        if (!pJson["avatar_hash"].isNull()) {
            avatarHash_ = std::make_shared<std::string>(pJson["avatar_hash"].asString());
        }
    }
    if (pJson.isMember("avatar_frame")) {
        dirtyFlag_[6] = true;
        if (!pJson["avatar_frame"].isNull()) {
            avatarFrame_ = std::make_shared<int32_t>((int32_t) pJson["avatar_frame"].asInt64());
        }
    }
    if (pJson.isMember("clan")) {
        dirtyFlag_[7] = true;
        if (!pJson["clan"].isNull()) {
            clan_ = std::make_shared<std::string>(pJson["clan"].asString());
        }
    }
    if (pJson.isMember("permission")) {
        dirtyFlag_[8] = true;
        if (!pJson["permission"].isNull()) {
            permission_ = std::make_shared<std::string>(pJson["permission"].asString());
        }
    }
    if (pJson.isMember("password")) {
        dirtyFlag_[9] = true;
        if (!pJson["password"].isNull()) {
            password_ = std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if (pJson.isMember("email")) {
        dirtyFlag_[10] = true;
        if (!pJson["email"].isNull()) {
            email_ = std::make_shared<std::string>(pJson["email"].asString());
        }
    }
}

void Player::updateByMasqueradedJson(const Json::Value &pJson,
                                     const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 11) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            id_ = std::make_shared<int64_t>((int64_t) pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            username_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull()) {
            motto_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull()) {
            region_ = std::make_shared<int32_t>((int32_t) pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull()) {
            avatar_ = std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull()) {
            avatarHash_ = std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull()) {
            avatarFrame_ = std::make_shared<int32_t>((int32_t) pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull()) {
            clan_ = std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if (!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8])) {
        dirtyFlag_[8] = true;
        if (!pJson[pMasqueradingVector[8]].isNull()) {
            permission_ = std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if (!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9])) {
        dirtyFlag_[9] = true;
        if (!pJson[pMasqueradingVector[9]].isNull()) {
            password_ = std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if (!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10])) {
        dirtyFlag_[10] = true;
        if (!pJson[pMasqueradingVector[10]].isNull()) {
            email_ = std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
}

void Player::updateByJson(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("id")) {
        if (!pJson["id"].isNull()) {
            id_ = std::make_shared<int64_t>((int64_t) pJson["id"].asInt64());
        }
    }
    if (pJson.isMember("username")) {
        dirtyFlag_[1] = true;
        if (!pJson["username"].isNull()) {
            username_ = std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if (pJson.isMember("motto")) {
        dirtyFlag_[2] = true;
        if (!pJson["motto"].isNull()) {
            motto_ = std::make_shared<std::string>(pJson["motto"].asString());
        }
    }
    if (pJson.isMember("region")) {
        dirtyFlag_[3] = true;
        if (!pJson["region"].isNull()) {
            region_ = std::make_shared<int32_t>((int32_t) pJson["region"].asInt64());
        }
    }
    if (pJson.isMember("avatar")) {
        dirtyFlag_[4] = true;
        if (!pJson["avatar"].isNull()) {
            avatar_ = std::make_shared<std::string>(pJson["avatar"].asString());
        }
    }
    if (pJson.isMember("avatar_hash")) {
        dirtyFlag_[5] = true;
        if (!pJson["avatar_hash"].isNull()) {
            avatarHash_ = std::make_shared<std::string>(pJson["avatar_hash"].asString());
        }
    }
    if (pJson.isMember("avatar_frame")) {
        dirtyFlag_[6] = true;
        if (!pJson["avatar_frame"].isNull()) {
            avatarFrame_ = std::make_shared<int32_t>((int32_t) pJson["avatar_frame"].asInt64());
        }
    }
    if (pJson.isMember("clan")) {
        dirtyFlag_[7] = true;
        if (!pJson["clan"].isNull()) {
            clan_ = std::make_shared<std::string>(pJson["clan"].asString());
        }
    }
    if (pJson.isMember("permission")) {
        dirtyFlag_[8] = true;
        if (!pJson["permission"].isNull()) {
            permission_ = std::make_shared<std::string>(pJson["permission"].asString());
        }
    }
    if (pJson.isMember("password")) {
        dirtyFlag_[9] = true;
        if (!pJson["password"].isNull()) {
            password_ = std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if (pJson.isMember("email")) {
        dirtyFlag_[10] = true;
        if (!pJson["email"].isNull()) {
            email_ = std::make_shared<std::string>(pJson["email"].asString());
        }
    }
}

const int64_t &Player::getValueOfId() const noexcept {
    const static int64_t defaultValue = int64_t();
    if (id_)
        return *id_;
    return defaultValue;
}

const std::shared_ptr<int64_t> &Player::getId() const noexcept {
    return id_;
}

void Player::setId(const int64_t &pId) noexcept {
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}

const typename Player::PrimaryKeyType &Player::getPrimaryKey() const {
    assert(id_);
    return *id_;
}

const std::string &Player::getValueOfUsername() const noexcept {
    const static std::string defaultValue = std::string();
    if (username_)
        return *username_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Player::getUsername() const noexcept {
    return username_;
}

void Player::setUsername(const std::string &pUsername) noexcept {
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[1] = true;
}

void Player::setUsername(std::string &&pUsername) noexcept {
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[1] = true;
}

const std::string &Player::getValueOfMotto() const noexcept {
    const static std::string defaultValue = std::string();
    if (motto_)
        return *motto_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Player::getMotto() const noexcept {
    return motto_;
}

void Player::setMotto(const std::string &pMotto) noexcept {
    motto_ = std::make_shared<std::string>(pMotto);
    dirtyFlag_[2] = true;
}

void Player::setMotto(std::string &&pMotto) noexcept {
    motto_ = std::make_shared<std::string>(std::move(pMotto));
    dirtyFlag_[2] = true;
}

void Player::setMottoToNull() noexcept {
    motto_.reset();
    dirtyFlag_[2] = true;
}

const int32_t &Player::getValueOfRegion() const noexcept {
    const static int32_t defaultValue = int32_t();
    if (region_)
        return *region_;
    return defaultValue;
}

const std::shared_ptr<int32_t> &Player::getRegion() const noexcept {
    return region_;
}

void Player::setRegion(const int32_t &pRegion) noexcept {
    region_ = std::make_shared<int32_t>(pRegion);
    dirtyFlag_[3] = true;
}

const std::string &Player::getValueOfAvatar() const noexcept {
    const static std::string defaultValue = std::string();
    if (avatar_)
        return *avatar_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Player::getAvatar() const noexcept {
    return avatar_;
}

void Player::setAvatar(const std::string &pAvatar) noexcept {
    avatar_ = std::make_shared<std::string>(pAvatar);
    dirtyFlag_[4] = true;
}

void Player::setAvatar(std::string &&pAvatar) noexcept {
    avatar_ = std::make_shared<std::string>(std::move(pAvatar));
    dirtyFlag_[4] = true;
}

void Player::setAvatarToNull() noexcept {
    avatar_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Player::getValueOfAvatarHash() const noexcept {
    const static std::string defaultValue = std::string();
    if (avatarHash_)
        return *avatarHash_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Player::getAvatarHash() const noexcept {
    return avatarHash_;
}

void Player::setAvatarHash(const std::string &pAvatarHash) noexcept {
    avatarHash_ = std::make_shared<std::string>(pAvatarHash);
    dirtyFlag_[5] = true;
}

void Player::setAvatarHash(std::string &&pAvatarHash) noexcept {
    avatarHash_ = std::make_shared<std::string>(std::move(pAvatarHash));
    dirtyFlag_[5] = true;
}

void Player::setAvatarHashToNull() noexcept {
    avatarHash_.reset();
    dirtyFlag_[5] = true;
}

const int32_t &Player::getValueOfAvatarFrame() const noexcept {
    const static int32_t defaultValue = int32_t();
    if (avatarFrame_)
        return *avatarFrame_;
    return defaultValue;
}

const std::shared_ptr<int32_t> &Player::getAvatarFrame() const noexcept {
    return avatarFrame_;
}

void Player::setAvatarFrame(const int32_t &pAvatarFrame) noexcept {
    avatarFrame_ = std::make_shared<int32_t>(pAvatarFrame);
    dirtyFlag_[6] = true;
}

const std::string &Player::getValueOfClan() const noexcept {
    const static std::string defaultValue = std::string();
    if (clan_)
        return *clan_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Player::getClan() const noexcept {
    return clan_;
}

void Player::setClan(const std::string &pClan) noexcept {
    clan_ = std::make_shared<std::string>(pClan);
    dirtyFlag_[7] = true;
}

void Player::setClan(std::string &&pClan) noexcept {
    clan_ = std::make_shared<std::string>(std::move(pClan));
    dirtyFlag_[7] = true;
}

void Player::setClanToNull() noexcept {
    clan_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Player::getValueOfPermission() const noexcept {
    const static std::string defaultValue = std::string();
    if (permission_)
        return *permission_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Player::getPermission() const noexcept {
    return permission_;
}

void Player::setPermission(const std::string &pPermission) noexcept {
    permission_ = std::make_shared<std::string>(pPermission);
    dirtyFlag_[8] = true;
}

void Player::setPermission(std::string &&pPermission) noexcept {
    permission_ = std::make_shared<std::string>(std::move(pPermission));
    dirtyFlag_[8] = true;
}

const std::string &Player::getValueOfPassword() const noexcept {
    const static std::string defaultValue = std::string();
    if (password_)
        return *password_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Player::getPassword() const noexcept {
    return password_;
}

void Player::setPassword(const std::string &pPassword) noexcept {
    password_ = std::make_shared<std::string>(pPassword);
    dirtyFlag_[9] = true;
}

void Player::setPassword(std::string &&pPassword) noexcept {
    password_ = std::make_shared<std::string>(std::move(pPassword));
    dirtyFlag_[9] = true;
}

void Player::setPasswordToNull() noexcept {
    password_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Player::getValueOfEmail() const noexcept {
    const static std::string defaultValue = std::string();
    if (email_)
        return *email_;
    return defaultValue;
}

const std::shared_ptr<std::string> &Player::getEmail() const noexcept {
    return email_;
}

void Player::setEmail(const std::string &pEmail) noexcept {
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[10] = true;
}

void Player::setEmail(std::string &&pEmail) noexcept {
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[10] = true;
}

void Player::setEmailToNull() noexcept {
    email_.reset();
    dirtyFlag_[10] = true;
}

void Player::updateId(const uint64_t id) {
}

const std::vector<std::string> &Player::insertColumns() noexcept {
    static const std::vector<std::string> inCols = {
            "username",
            "motto",
            "region",
            "avatar",
            "avatar_hash",
            "avatar_frame",
            "clan",
            "permission",
            "password",
            "email"
    };
    return inCols;
}

void Player::outputArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[1]) {
        if (getUsername()) {
            binder << getValueOfUsername();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getMotto()) {
            binder << getValueOfMotto();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getRegion()) {
            binder << getValueOfRegion();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4]) {
        if (getAvatar()) {
            binder << getValueOfAvatar();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5]) {
        if (getAvatarHash()) {
            binder << getValueOfAvatarHash();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6]) {
        if (getAvatarFrame()) {
            binder << getValueOfAvatarFrame();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7]) {
        if (getClan()) {
            binder << getValueOfClan();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[8]) {
        if (getPermission()) {
            binder << getValueOfPermission();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[9]) {
        if (getPassword()) {
            binder << getValueOfPassword();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[10]) {
        if (getEmail()) {
            binder << getValueOfEmail();
        } else {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Player::updateColumns() const {
    std::vector<std::string> ret;
    if (dirtyFlag_[1]) {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2]) {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3]) {
        ret.push_back(getColumnName(3));
    }
    if (dirtyFlag_[4]) {
        ret.push_back(getColumnName(4));
    }
    if (dirtyFlag_[5]) {
        ret.push_back(getColumnName(5));
    }
    if (dirtyFlag_[6]) {
        ret.push_back(getColumnName(6));
    }
    if (dirtyFlag_[7]) {
        ret.push_back(getColumnName(7));
    }
    if (dirtyFlag_[8]) {
        ret.push_back(getColumnName(8));
    }
    if (dirtyFlag_[9]) {
        ret.push_back(getColumnName(9));
    }
    if (dirtyFlag_[10]) {
        ret.push_back(getColumnName(10));
    }
    return ret;
}

void Player::updateArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[1]) {
        if (getUsername()) {
            binder << getValueOfUsername();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getMotto()) {
            binder << getValueOfMotto();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getRegion()) {
            binder << getValueOfRegion();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4]) {
        if (getAvatar()) {
            binder << getValueOfAvatar();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5]) {
        if (getAvatarHash()) {
            binder << getValueOfAvatarHash();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6]) {
        if (getAvatarFrame()) {
            binder << getValueOfAvatarFrame();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7]) {
        if (getClan()) {
            binder << getValueOfClan();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[8]) {
        if (getPermission()) {
            binder << getValueOfPermission();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[9]) {
        if (getPassword()) {
            binder << getValueOfPassword();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[10]) {
        if (getEmail()) {
            binder << getValueOfEmail();
        } else {
            binder << nullptr;
        }
    }
}

Json::Value Player::toJson() const {
    Json::Value ret;
    if (getId()) {
        ret["id"] = (Json::Int64) getValueOfId();
    } else {
        ret["id"] = Json::Value();
    }
    if (getUsername()) {
        ret["username"] = getValueOfUsername();
    } else {
        ret["username"] = Json::Value();
    }
    if (getMotto()) {
        ret["motto"] = getValueOfMotto();
    } else {
        ret["motto"] = Json::Value();
    }
    if (getRegion()) {
        ret["region"] = getValueOfRegion();
    } else {
        ret["region"] = Json::Value();
    }
    if (getAvatar()) {
        ret["avatar"] = getValueOfAvatar();
    } else {
        ret["avatar"] = Json::Value();
    }
    if (getAvatarHash()) {
        ret["avatar_hash"] = getValueOfAvatarHash();
    } else {
        ret["avatar_hash"] = Json::Value();
    }
    if (getAvatarFrame()) {
        ret["avatar_frame"] = getValueOfAvatarFrame();
    } else {
        ret["avatar_frame"] = Json::Value();
    }
    if (getClan()) {
        ret["clan"] = getValueOfClan();
    } else {
        ret["clan"] = Json::Value();
    }
    if (getPermission()) {
        ret["permission"] = getValueOfPermission();
    } else {
        ret["permission"] = Json::Value();
    }
    if (getPassword()) {
        ret["password"] = getValueOfPassword();
    } else {
        ret["password"] = Json::Value();
    }
    if (getEmail()) {
        ret["email"] = getValueOfEmail();
    } else {
        ret["email"] = Json::Value();
    }
    return ret;
}

Json::Value Player::toMasqueradedJson(
        const std::vector<std::string> &pMasqueradingVector) const {
    Json::Value ret;
    if (pMasqueradingVector.size() == 11) {
        if (!pMasqueradingVector[0].empty()) {
            if (getId()) {
                ret[pMasqueradingVector[0]] = (Json::Int64) getValueOfId();
            } else {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (getUsername()) {
                ret[pMasqueradingVector[1]] = getValueOfUsername();
            } else {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (getMotto()) {
                ret[pMasqueradingVector[2]] = getValueOfMotto();
            } else {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (getRegion()) {
                ret[pMasqueradingVector[3]] = getValueOfRegion();
            } else {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[4].empty()) {
            if (getAvatar()) {
                ret[pMasqueradingVector[4]] = getValueOfAvatar();
            } else {
                ret[pMasqueradingVector[4]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[5].empty()) {
            if (getAvatarHash()) {
                ret[pMasqueradingVector[5]] = getValueOfAvatarHash();
            } else {
                ret[pMasqueradingVector[5]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[6].empty()) {
            if (getAvatarFrame()) {
                ret[pMasqueradingVector[6]] = getValueOfAvatarFrame();
            } else {
                ret[pMasqueradingVector[6]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[7].empty()) {
            if (getClan()) {
                ret[pMasqueradingVector[7]] = getValueOfClan();
            } else {
                ret[pMasqueradingVector[7]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[8].empty()) {
            if (getPermission()) {
                ret[pMasqueradingVector[8]] = getValueOfPermission();
            } else {
                ret[pMasqueradingVector[8]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[9].empty()) {
            if (getPassword()) {
                ret[pMasqueradingVector[9]] = getValueOfPassword();
            } else {
                ret[pMasqueradingVector[9]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[10].empty()) {
            if (getEmail()) {
                ret[pMasqueradingVector[10]] = getValueOfEmail();
            } else {
                ret[pMasqueradingVector[10]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId()) {
        ret["id"] = (Json::Int64) getValueOfId();
    } else {
        ret["id"] = Json::Value();
    }
    if (getUsername()) {
        ret["username"] = getValueOfUsername();
    } else {
        ret["username"] = Json::Value();
    }
    if (getMotto()) {
        ret["motto"] = getValueOfMotto();
    } else {
        ret["motto"] = Json::Value();
    }
    if (getRegion()) {
        ret["region"] = getValueOfRegion();
    } else {
        ret["region"] = Json::Value();
    }
    if (getAvatar()) {
        ret["avatar"] = getValueOfAvatar();
    } else {
        ret["avatar"] = Json::Value();
    }
    if (getAvatarHash()) {
        ret["avatar_hash"] = getValueOfAvatarHash();
    } else {
        ret["avatar_hash"] = Json::Value();
    }
    if (getAvatarFrame()) {
        ret["avatar_frame"] = getValueOfAvatarFrame();
    } else {
        ret["avatar_frame"] = Json::Value();
    }
    if (getClan()) {
        ret["clan"] = getValueOfClan();
    } else {
        ret["clan"] = Json::Value();
    }
    if (getPermission()) {
        ret["permission"] = getValueOfPermission();
    } else {
        ret["permission"] = Json::Value();
    }
    if (getPassword()) {
        ret["password"] = getValueOfPassword();
    } else {
        ret["password"] = Json::Value();
    }
    if (getEmail()) {
        ret["email"] = getValueOfEmail();
    } else {
        ret["email"] = Json::Value();
    }
    return ret;
}

bool Player::validateJsonForCreation(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("id")) {
        if (!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if (pJson.isMember("username")) {
        if (!validJsonOfField(1, "username", pJson["username"], err, true))
            return false;
    }
    if (pJson.isMember("motto")) {
        if (!validJsonOfField(2, "motto", pJson["motto"], err, true))
            return false;
    }
    if (pJson.isMember("region")) {
        if (!validJsonOfField(3, "region", pJson["region"], err, true))
            return false;
    }
    if (pJson.isMember("avatar")) {
        if (!validJsonOfField(4, "avatar", pJson["avatar"], err, true))
            return false;
    }
    if (pJson.isMember("avatar_hash")) {
        if (!validJsonOfField(5, "avatar_hash", pJson["avatar_hash"], err, true))
            return false;
    }
    if (pJson.isMember("avatar_frame")) {
        if (!validJsonOfField(6, "avatar_frame", pJson["avatar_frame"], err, true))
            return false;
    }
    if (pJson.isMember("clan")) {
        if (!validJsonOfField(7, "clan", pJson["clan"], err, true))
            return false;
    }
    if (pJson.isMember("permission")) {
        if (!validJsonOfField(8, "permission", pJson["permission"], err, true))
            return false;
    }
    if (pJson.isMember("password")) {
        if (!validJsonOfField(9, "password", pJson["password"], err, true))
            return false;
    }
    if (pJson.isMember("email")) {
        if (!validJsonOfField(10, "email", pJson["email"], err, true))
            return false;
    }
    return true;
}

bool Player::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err) {
    if (pMasqueradingVector.size() != 11) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty()) {
            if (pJson.isMember(pMasqueradingVector[0])) {
                if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (pJson.isMember(pMasqueradingVector[1])) {
                if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (pJson.isMember(pMasqueradingVector[2])) {
                if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (pJson.isMember(pMasqueradingVector[3])) {
                if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[4].empty()) {
            if (pJson.isMember(pMasqueradingVector[4])) {
                if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[5].empty()) {
            if (pJson.isMember(pMasqueradingVector[5])) {
                if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[6].empty()) {
            if (pJson.isMember(pMasqueradingVector[6])) {
                if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[7].empty()) {
            if (pJson.isMember(pMasqueradingVector[7])) {
                if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[8].empty()) {
            if (pJson.isMember(pMasqueradingVector[8])) {
                if (!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[9].empty()) {
            if (pJson.isMember(pMasqueradingVector[9])) {
                if (!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[10].empty()) {
            if (pJson.isMember(pMasqueradingVector[10])) {
                if (!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                    return false;
            }
        }
    }
    catch (const Json::LogicError &e) {
        err = e.what();
        return false;
    }
    return true;
}

bool Player::validateJsonForUpdate(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("id")) {
        if (!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    } else {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("username")) {
        if (!validJsonOfField(1, "username", pJson["username"], err, false))
            return false;
    }
    if (pJson.isMember("motto")) {
        if (!validJsonOfField(2, "motto", pJson["motto"], err, false))
            return false;
    }
    if (pJson.isMember("region")) {
        if (!validJsonOfField(3, "region", pJson["region"], err, false))
            return false;
    }
    if (pJson.isMember("avatar")) {
        if (!validJsonOfField(4, "avatar", pJson["avatar"], err, false))
            return false;
    }
    if (pJson.isMember("avatar_hash")) {
        if (!validJsonOfField(5, "avatar_hash", pJson["avatar_hash"], err, false))
            return false;
    }
    if (pJson.isMember("avatar_frame")) {
        if (!validJsonOfField(6, "avatar_frame", pJson["avatar_frame"], err, false))
            return false;
    }
    if (pJson.isMember("clan")) {
        if (!validJsonOfField(7, "clan", pJson["clan"], err, false))
            return false;
    }
    if (pJson.isMember("permission")) {
        if (!validJsonOfField(8, "permission", pJson["permission"], err, false))
            return false;
    }
    if (pJson.isMember("password")) {
        if (!validJsonOfField(9, "password", pJson["password"], err, false))
            return false;
    }
    if (pJson.isMember("email")) {
        if (!validJsonOfField(10, "email", pJson["email"], err, false))
            return false;
    }
    return true;
}

bool Player::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err) {
    if (pMasqueradingVector.size() != 11) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
                return false;
        } else {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
                return false;
        }
        if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
                return false;
        }
        if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
                return false;
        }
        if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
            if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
                return false;
        }
        if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
            if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
                return false;
        }
        if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
            if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
                return false;
        }
        if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
            if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
                return false;
        }
        if (!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8])) {
            if (!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
                return false;
        }
        if (!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9])) {
            if (!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
                return false;
        }
        if (!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10])) {
            if (!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
                return false;
        }
    }
    catch (const Json::LogicError &e) {
        err = e.what();
        return false;
    }
    return true;
}

bool Player::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation) {
    switch (index) {
        case 0:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (isForCreation) {
                err = "The automatic primary key cannot be set";
                return false;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 2:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 3:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isInt()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 4:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 5:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 6:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isInt()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 7:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 8:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 9:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 10:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        default:
            err = "Internal error in the server";
            return false;
            break;
    }
    return true;
}
