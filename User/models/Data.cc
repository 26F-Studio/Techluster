/**
 *
 *  Data.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Data.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::techluster;

const std::string Data::Cols::_id = "id";
const std::string Data::Cols::_public = "public";
const std::string Data::Cols::_protected = "protected";
const std::string Data::Cols::_private = "private";
const std::string Data::primaryKeyName = "id";
const bool Data::hasPrimaryKey = true;
const std::string Data::tableName = "data";

const std::vector<typename Data::MetaData> Data::metaData_ = {
        {"id",        "int64_t",     "bigint", 8, 1, 1, 1},
        {"public",    "std::string", "text",   0, 0, 0, 0},
        {"protected", "std::string", "text",   0, 0, 0, 0},
        {"private",   "std::string", "text",   0, 0, 0, 0}
};

const std::string &Data::getColumnName(size_t index)

noexcept(false)
{
assert(index<metaData_
.

size()

);
return metaData_[index].
colName_;
}

Data::Data(const Row &r, const ssize_t indexOffset)

noexcept
{
if(indexOffset < 0)
{
if(!r["id"].

isNull()

)
{
id_ = std::make_shared<int64_t>(r["id"].as<int64_t>());
}
if(!r["public"].

isNull()

)
{
public_ = std::make_shared<std::string>(r["public"].as<std::string>());
}
if(!r["protected"].

isNull()

)
{
protected_ = std::make_shared<std::string>(r["protected"].as<std::string>());
}
if(!r["private"].

isNull()

)
{
private_ = std::make_shared<std::string>(r["private"].as<std::string>());
}
}
else
{
size_t offset = (size_t) indexOffset;
if(offset + 4 > r.

size()

)
{
LOG_FATAL << "Invalid SQL result for this model";
return;
}
size_t index;
index = offset + 0;
if(!r[index].

isNull()

)
{
id_ = std::make_shared<int64_t>(r[index].as<int64_t>());
}
index = offset + 1;
if(!r[index].

isNull()

)
{
public_ = std::make_shared<std::string>(r[index].as<std::string>());
}
index = offset + 2;
if(!r[index].

isNull()

)
{
protected_ = std::make_shared<std::string>(r[index].as<std::string>());
}
index = offset + 3;
if(!r[index].

isNull()

)
{
private_ = std::make_shared<std::string>(r[index].as<std::string>());
}
}

}

Data::Data(const Json::Value &pJson, const std::vector <std::string> &pMasqueradingVector)

noexcept(false)
{
if(pMasqueradingVector.

size()

!= 4)
{
LOG_ERROR << "Bad masquerading vector";
return;
}
if(!pMasqueradingVector[0].

empty() &&

pJson.
isMember(pMasqueradingVector[0])
)
{
dirtyFlag_[0] = true;
if(!pJson[pMasqueradingVector[0]].

isNull()

)
{
id_ = std::make_shared<int64_t>((int64_t) pJson[pMasqueradingVector[0]].asInt64());
}
}
if(!pMasqueradingVector[1].

empty() &&

pJson.
isMember(pMasqueradingVector[1])
)
{
dirtyFlag_[1] = true;
if(!pJson[pMasqueradingVector[1]].

isNull()

)
{
public_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
}
}
if(!pMasqueradingVector[2].

empty() &&

pJson.
isMember(pMasqueradingVector[2])
)
{
dirtyFlag_[2] = true;
if(!pJson[pMasqueradingVector[2]].

isNull()

)
{
protected_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
}
}
if(!pMasqueradingVector[3].

empty() &&

pJson.
isMember(pMasqueradingVector[3])
)
{
dirtyFlag_[3] = true;
if(!pJson[pMasqueradingVector[3]].

isNull()

)
{
private_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
}
}
}

Data::Data(const Json::Value &pJson)

noexcept(false)
{
if(pJson.isMember("id"))
{
dirtyFlag_[0]=true;
if(!pJson["id"].

isNull()

)
{
id_ = std::make_shared<int64_t>((int64_t) pJson["id"].asInt64());
}
}
if(pJson.isMember("public"))
{
dirtyFlag_[1]=true;
if(!pJson["public"].

isNull()

)
{
public_ = std::make_shared<std::string>(pJson["public"].asString());
}
}
if(pJson.isMember("protected"))
{
dirtyFlag_[2]=true;
if(!pJson["protected"].

isNull()

)
{
protected_ = std::make_shared<std::string>(pJson["protected"].asString());
}
}
if(pJson.isMember("private"))
{
dirtyFlag_[3]=true;
if(!pJson["private"].

isNull()

)
{
private_ = std::make_shared<std::string>(pJson["private"].asString());
}
}
}

void Data::updateByMasqueradedJson(const Json::Value &pJson,
                                   const std::vector <std::string> &pMasqueradingVector)

noexcept(false)
{
if(pMasqueradingVector.

size()

!= 4)
{
LOG_ERROR << "Bad masquerading vector";
return;
}
if(!pMasqueradingVector[0].

empty() &&

pJson.
isMember(pMasqueradingVector[0])
)
{
if(!pJson[pMasqueradingVector[0]].

isNull()

)
{
id_ = std::make_shared<int64_t>((int64_t) pJson[pMasqueradingVector[0]].asInt64());
}
}
if(!pMasqueradingVector[1].

empty() &&

pJson.
isMember(pMasqueradingVector[1])
)
{
dirtyFlag_[1] = true;
if(!pJson[pMasqueradingVector[1]].

isNull()

)
{
public_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
}
}
if(!pMasqueradingVector[2].

empty() &&

pJson.
isMember(pMasqueradingVector[2])
)
{
dirtyFlag_[2] = true;
if(!pJson[pMasqueradingVector[2]].

isNull()

)
{
protected_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
}
}
if(!pMasqueradingVector[3].

empty() &&

pJson.
isMember(pMasqueradingVector[3])
)
{
dirtyFlag_[3] = true;
if(!pJson[pMasqueradingVector[3]].

isNull()

)
{
private_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
}
}
}

void Data::updateByJson(const Json::Value &pJson)

noexcept(false)
{
if(pJson.isMember("id"))
{
if(!pJson["id"].

isNull()

)
{
id_ = std::make_shared<int64_t>((int64_t) pJson["id"].asInt64());
}
}
if(pJson.isMember("public"))
{
dirtyFlag_[1] = true;
if(!pJson["public"].

isNull()

)
{
public_ = std::make_shared<std::string>(pJson["public"].asString());
}
}
if(pJson.isMember("protected"))
{
dirtyFlag_[2] = true;
if(!pJson["protected"].

isNull()

)
{
protected_ = std::make_shared<std::string>(pJson["protected"].asString());
}
}
if(pJson.isMember("private"))
{
dirtyFlag_[3] = true;
if(!pJson["private"].

isNull()

)
{
private_ = std::make_shared<std::string>(pJson["private"].asString());
}
}
}

const int64_t &Data::getValueOfId() const

noexcept
{
const static int64_t defaultValue = int64_t();
if(id_)
return *
id_;
return
defaultValue;
}

const std::shared_ptr <int64_t> &Data::getId() const

noexcept
{
return
id_;
}

void Data::setId(const int64_t &pId)

noexcept
{
id_ = std::make_shared<int64_t>(pId);
dirtyFlag_[0] = true;
}

const typename Data::PrimaryKeyType &Data::getPrimaryKey() const {
    assert(id_);
    return *id_;
}

const std::string &Data::getValueOfPublic() const

noexcept
{
const static std::string defaultValue = std::string();
if(public_)
return *
public_;
return
defaultValue;
}

const std::shared_ptr <std::string> &Data::getPublic() const

noexcept
{
return
public_;
}

void Data::setPublic(const std::string &pPublic)

noexcept
{
public_ = std::make_shared<std::string>(pPublic);
dirtyFlag_[1] = true;
}

void Data::setPublic(std::string &&pPublic)

noexcept
{
public_ = std::make_shared<std::string>(std::move(pPublic));
dirtyFlag_[1] = true;
}

void Data::setPublicToNull()

noexcept
{
public_.

reset();

dirtyFlag_[1] = true;
}

const std::string &Data::getValueOfProtected() const

noexcept
{
const static std::string defaultValue = std::string();
if(protected_)
return *
protected_;
return
defaultValue;
}

const std::shared_ptr <std::string> &Data::getProtected() const

noexcept
{
return
protected_;
}

void Data::setProtected(const std::string &pProtected)

noexcept
{
protected_ = std::make_shared<std::string>(pProtected);
dirtyFlag_[2] = true;
}

void Data::setProtected(std::string &&pProtected)

noexcept
{
protected_ = std::make_shared<std::string>(std::move(pProtected));
dirtyFlag_[2] = true;
}

void Data::setProtectedToNull()

noexcept
{
protected_.

reset();

dirtyFlag_[2] = true;
}

const std::string &Data::getValueOfPrivate() const

noexcept
{
const static std::string defaultValue = std::string();
if(private_)
return *
private_;
return
defaultValue;
}

const std::shared_ptr <std::string> &Data::getPrivate() const

noexcept
{
return
private_;
}

void Data::setPrivate(const std::string &pPrivate)

noexcept
{
private_ = std::make_shared<std::string>(pPrivate);
dirtyFlag_[3] = true;
}

void Data::setPrivate(std::string &&pPrivate)

noexcept
{
private_ = std::make_shared<std::string>(std::move(pPrivate));
dirtyFlag_[3] = true;
}

void Data::setPrivateToNull()

noexcept
{
private_.

reset();

dirtyFlag_[3] = true;
}

void Data::updateId(const uint64_t id) {
}

const std::vector <std::string> &Data::insertColumns()

noexcept
{
static const std::vector <std::string> inCols = {
        "public",
        "protected",
        "private"
};
return
inCols;
}

void Data::outputArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[1]) {
        if (getPublic()) {
            binder << getValueOfPublic();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getProtected()) {
            binder << getValueOfProtected();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getPrivate()) {
            binder << getValueOfPrivate();
        } else {
            binder << nullptr;
        }
    }
}

const std::vector <std::string> Data::updateColumns() const {
    std::vector <std::string> ret;
    if (dirtyFlag_[1]) {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2]) {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3]) {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void Data::updateArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[1]) {
        if (getPublic()) {
            binder << getValueOfPublic();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getProtected()) {
            binder << getValueOfProtected();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getPrivate()) {
            binder << getValueOfPrivate();
        } else {
            binder << nullptr;
        }
    }
}

Json::Value Data::toJson() const {
    Json::Value ret;
    if (getId()) {
        ret["id"] = (Json::Int64) getValueOfId();
    } else {
        ret["id"] = Json::Value();
    }
    if (getPublic()) {
        ret["public"] = getValueOfPublic();
    } else {
        ret["public"] = Json::Value();
    }
    if (getProtected()) {
        ret["protected"] = getValueOfProtected();
    } else {
        ret["protected"] = Json::Value();
    }
    if (getPrivate()) {
        ret["private"] = getValueOfPrivate();
    } else {
        ret["private"] = Json::Value();
    }
    return ret;
}

Json::Value Data::toMasqueradedJson(
        const std::vector <std::string> &pMasqueradingVector) const {
    Json::Value ret;
    if (pMasqueradingVector.size() == 4) {
        if (!pMasqueradingVector[0].empty()) {
            if (getId()) {
                ret[pMasqueradingVector[0]] = (Json::Int64) getValueOfId();
            } else {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (getPublic()) {
                ret[pMasqueradingVector[1]] = getValueOfPublic();
            } else {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (getProtected()) {
                ret[pMasqueradingVector[2]] = getValueOfProtected();
            } else {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (getPrivate()) {
                ret[pMasqueradingVector[3]] = getValueOfPrivate();
            } else {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId()) {
        ret["id"] = (Json::Int64) getValueOfId();
    } else {
        ret["id"] = Json::Value();
    }
    if (getPublic()) {
        ret["public"] = getValueOfPublic();
    } else {
        ret["public"] = Json::Value();
    }
    if (getProtected()) {
        ret["protected"] = getValueOfProtected();
    } else {
        ret["protected"] = Json::Value();
    }
    if (getPrivate()) {
        ret["private"] = getValueOfPrivate();
    } else {
        ret["private"] = Json::Value();
    }
    return ret;
}

bool Data::validateJsonForCreation(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("id")) {
        if (!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if (pJson.isMember("public")) {
        if (!validJsonOfField(1, "public", pJson["public"], err, true))
            return false;
    }
    if (pJson.isMember("protected")) {
        if (!validJsonOfField(2, "protected", pJson["protected"], err, true))
            return false;
    }
    if (pJson.isMember("private")) {
        if (!validJsonOfField(3, "private", pJson["private"], err, true))
            return false;
    }
    return true;
}

bool Data::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector <std::string> &pMasqueradingVector,
                                              std::string &err) {
    if (pMasqueradingVector.size() != 4) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty()) {
            if (pJson.isMember(pMasqueradingVector[0])) {
                if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (pJson.isMember(pMasqueradingVector[1])) {
                if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (pJson.isMember(pMasqueradingVector[2])) {
                if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (pJson.isMember(pMasqueradingVector[3])) {
                if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                    return false;
            }
        }
    }
    catch (const Json::LogicError &e) {
        err = e.what();
        return false;
    }
    return true;
}

bool Data::validateJsonForUpdate(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("id")) {
        if (!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    } else {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("public")) {
        if (!validJsonOfField(1, "public", pJson["public"], err, false))
            return false;
    }
    if (pJson.isMember("protected")) {
        if (!validJsonOfField(2, "protected", pJson["protected"], err, false))
            return false;
    }
    if (pJson.isMember("private")) {
        if (!validJsonOfField(3, "private", pJson["private"], err, false))
            return false;
    }
    return true;
}

bool Data::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector <std::string> &pMasqueradingVector,
                                            std::string &err) {
    if (pMasqueradingVector.size() != 4) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
                return false;
        } else {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
                return false;
        }
        if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
                return false;
        }
        if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
                return false;
        }
    }
    catch (const Json::LogicError &e) {
        err = e.what();
        return false;
    }
    return true;
}

bool Data::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation) {
    switch (index) {
        case 0:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (isForCreation) {
                err = "The automatic primary key cannot be set";
                return false;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 2:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 3:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        default:
            err = "Internal error in the server";
            return false;
            break;
    }
    return true;
}
